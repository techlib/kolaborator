#!/usr/bin/python3 -tt
# -*- coding: utf-8 -*-

# Twisted helps us structure our async tasks.
# The application threads are structured in the following way:
#
#  reactor
#   `-- manager (1 thread)
#   `-- workers (2 threads)
#
from twisted.internet import reactor
from twisted.python import log

# For database async notifications.
from txpostgres import txpostgres

# Data are accessed through SQLSoup, using SQLAlchemy.
from sqlalchemy.orm import scoped_session, sessionmaker
from sqlalchemy import create_engine
from sqlsoup import SQLSoup

# Command line arguments follow the GNU conventions.
from getopt import gnu_getopt
from sys import argv, stderr

# Configuration is stored in a simple ini file.
from configparser import ConfigParser

# Import all the application handles.
from kolaborator.manager import Manager
from kolaborator.notifier import Notifier


if __name__ == '__main__':
    def do_start(config):
        # Start Twisted logging to console.
        log.startLogging(stderr)

        # Read database configuration options.
        db_url = config.get('database', 'url')
        db_url_flow = config.get('database', 'url_flow')
        db_url_radius = config.get('database', 'url_radius')

        # Default to much saner database query defaults and always
        # commit and/or flush statements explicitly.
        factory = sessionmaker(autocommit=False, autoflush=False)

        # Prepare database connection with table reflection.
        engine = create_engine(db_url)
        session = scoped_session(factory)
        db = SQLSoup(engine, session=session)

        # Same with the flow database.
        engine_flow = create_engine(db_url_flow)
        session_flow = scoped_session(factory)
        db_flow = SQLSoup(engine_flow, session=session_flow)

        # And same for the radius accounting database.
        engine_radius = create_engine(db_url_radius)
        session_radius = scoped_session(factory)
        db_radius = SQLSoup(engine_radius, session=session_radius)

        # Extract manager options, sans the pool_size we handle here.
        manager_opts = dict(config.items('manager'))
        manager_pool = int(manager_opts.pop('pool_size', 2))

        # Set the correct thread pool size for the manager.
        reactor.suggestThreadPoolSize(manager_pool)

        # Initialize database notifier
        notifier = Notifier(reactor, db_url)

        # Prepare the manager that runs in an exclusive thread.
        manager = Manager(db, db_flow, db_radius, notifier, **manager_opts)

        # Run the startup code as the first thing.
        reactor.callLater(0, manager.start)

        # Run the Twisted reactor until the user terminates us.
        reactor.run()


    def do_help(*args, **kwargs):
        print('Usage: kolaborator-daemon [--config=/etc/kolaborator.ini]')
        print('')
        print('The agent listens to database notifications and constructs')
        print('')
        print('OPTIONS:')
        print('  --help, -h          Display this help.')
        print('  --version, -V       Display version info.')
        print('')
        print('  --config, -c file   Load alternative configuration file.')
        print('')
        print('Report bugs at <http://github.com/techlib/kolaborator>.')

    def do_version(*args, **kwargs):
        print('kolaborator-daemon (NTK) 1')

    # Parse command line arguments.
    opts, args = gnu_getopt(argv, 'hVc:', ['help', 'version', 'config='])

    action = do_start
    config_path = '/etc/kolaborator.ini'

    for k, v in opts:
        if k in ('--help', '-h'):
            action = do_help
        elif k in ('--version', '-V'):
            action = do_version
        elif k in ('--config', '-c'):
            config_path = v

    # Load the configuration from file.
    if action not in (do_help, do_version):
        config = ConfigParser()
        config.read(config_path)

    # Load the configuration from file.
    config = ConfigParser()
    config.read(config_path)

    # Perform the selected action.
    action(config=config)

# vim:set sw=4 ts=4 et:
